#!/usr/bin/python
import os, sys
import random
import itertools
import time
import argparse

from classify import gst_init, Gst
from classify_kiwi import MFCCS, CLASSES, WINDOW_SIZE, BASENAME

from classify import targeted_wav_finder, load_timings
from classify import categorised_files
from classify import Classifier

TEST_AUDIO_DIR = "/home/douglas/corpora/kiwi/test/"
KIWI_TIMING_DATA = '/home/douglas/corpora/kiwi/times.txt'

def main():
    gst_init()
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='lots of rubbish output')
    parser.add_argument('-t', '--timings', action='append',
                        help='read timings from here')
    parser.add_argument('-d', '--audio-directory', action='append',
                        help='find audio in this directory')
    parser.add_argument('-c', '--classes', default='tf',
                        help="classes (letter per class, groups separated by ',')")
    parser.add_argument('-C', '--first-n', type=int, default=0,
                        help="classify this many files")
    parser.add_argument('-i', '--iterations', type=int, default=10000,
                        help="how many file cycles to run for")
    parser.add_argument('-H', '--hidden-size', type=int,
                        help="number of hidden neurons")
    parser.add_argument('-B', '--bottom-layer', type=int,
                        help="number of bottom layer output nodes")
    parser.add_argument('--ground-truth-file',
                        help="write ground truth to this file (CSV)")
    parser.add_argument('--classification-file',
                        help="write classifications to this file")
    parser.add_argument('--roc', action='store_true',
                        help="show ROC curves")
    parser.add_argument('-n', '--basename', default=BASENAME,
                        help="save nets etc using this basename")

    args = parser.parse_args()

    c = Classifier(channels=1)
    c.quiet = not args.verbose

    if args.net_filename:
        c.setup_from_file(args.net_filename)
    else:
        c.setup(MFCCS,
                args.hidden_size,
                args.classes,
                window_size=args.window_size,
                basename=args.basename)

    timed_files, full_timings = load_timings(c.classes,
                                             args.timings,
                                             args.audio_directory)

    if args.first_n:
        timed_files = timed_files[:args.first_n]
    test_files = [(ffn, full_timings[ffn]) for fn, ffn in timed_files]

    if args.bottom_layer:
        c.classifier.set_property('bottom-layer', args.bottom_layer)

    c.classify(test_files, ground_truth_file=args.ground_truth_file,
               classification_file=args.classification_file, show_roc=args.roc)

main()
