#!/usr/bin/python
import os, sys
import random
import itertools
import time
import argparse

from classify import gst_init, Gst
from classify_kiwi import MFCCS, CLASSES, WINDOW_SIZE, BASENAME

from classify import targeted_wav_finder, load_timings
from classify import categorised_files
from classify import Classifier

TEST_AUDIO_DIR = "/home/douglas/corpora/kiwi/test/"
KIWI_TIMING_DATA = '/home/douglas/corpora/kiwi/times.txt'

def main():
    gst_init()
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='lots of rubbish output')
    parser.add_argument('-x', '--no-roc', action='store_true',
                        help='no ROC curves')
    parser.add_argument('-t', '--timings', action='append',
                        help='read timings from here')
    parser.add_argument('-d', '--audio-directory', action='append',
                        help='find audio in this directory')
    parser.add_argument('-c', '--classes', default='tf',
                        help="classes (letter per class, groups separated by '|')")
    parser.add_argument('-C', '--first-n', type=int, default=12,
                        help="classify this many files")
    parser.add_argument('-i', '--iterations', type=int, default=10000,
                        help="how many file cycles to run for")
    parser.add_argument('-H', '--hidden-size', type=int,
                        help="number of hidden neurons")
    parser.add_argument('-B', '--bottom-layer', type=int,
                        help="number of bottom layer output nodes")

    args = parser.parse_args()

    all_classes, timed_files, full_timings = load_timings(args.classes,
                                                          args.timings,
                                                          args.audio_directory)

    test_files = [(ffn, full_timings[ffn]) for fn, ffn in timed_files[:args.first_n]]

    c = Classifier(mfccs=MFCCS,
                   hsize=args.hidden_size,
                   channels=1,
                   classes=args.classes,
                   window_size=WINDOW_SIZE,
                   basename=BASENAME)
    c.quiet = not args.verbose
    if args.bottom_layer:
        c.classifier.set_property('bottom-layer', args.bottom_layer)

    c.classify(test_files)

main()
