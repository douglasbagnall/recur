#!/usr/bin/python
import os, sys
import argparse

from classify import gst_init, Gst
from classify import Classifier, add_common_args, process_common_args

def main():
    gst_init()
    parser = argparse.ArgumentParser()
    add_common_args(parser)
    group = parser.add_argument_group('kiwi-test specific arguments')
    group.add_argument('-C', '--first-n', type=int, default=0,
                       help="classify this many files")
    group.add_argument('--ground-truth-file',
                       help="write ground truth to this file (CSV)")
    group.add_argument('--classification-file',
                       help="write classifications to this file")
    group.add_argument('--call-json-file',
                       help="write call locations to this file")
    group.add_argument('--call-threshold', default=0.5, type=float,
                       help="use this threshold for call-json-file")
    group.add_argument('--roc', action='store_true',
                       help="show ROC curves")
    group.add_argument('--target-class',
                       help="use this class in reports and ROC")
    group.add_argument('--target-group', type=int, default=0,
                       help="use this class group in reports and ROC")
    group.add_argument('--min-changes', type=int, default=0,
                       help="only test files with at least this many class switches")
    group.add_argument('--no-timings', action='store_true',
                       help="Don't compare with canonical timings")
    group.add_argument('--presence-roc', action='store_true',
                       help="plot a ROC curve of presence (implies --roc)")

    args = parser.parse_args()
    timed = not args.no_timings

    c = Classifier(channels=1)
    timed_files = process_common_args(c, args, timed=timed)
    if args.min_changes:
        timed_files = [x for x in timed_files
                       if len(x.timings) >= args.min_changes]

    if args.first_n:
        timed_files = timed_files[:args.first_n]

    target = None
    if args.target_class:
        target=(args.target_group, args.target_class)

    show_roc = args.roc or args.presence_roc

    c.classify(timed_files, ground_truth_file=args.ground_truth_file,
               classification_file=args.classification_file, show_roc=show_roc,
               call_json_file=args.call_json_file, call_threshold=args.call_threshold,
               show_presence_roc=args.presence_roc, target_index=target)

main()
