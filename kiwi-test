#!/usr/bin/python
import os, sys
import random
import itertools
import time
import argparse

from classify import gst_init, Gst
from classify_kiwi import MFCCS, WINDOW_SIZE, BASENAME
from classify_kiwi import MIN_FREQUENCY, MAX_FREQUENCY, KNEE_FREQUENCY

from classify import targeted_wav_finder, load_timings
from classify import categorised_files
from classify import Classifier, add_common_args

TEST_AUDIO_DIR = "/home/douglas/corpora/kiwi/test/"
KIWI_TIMING_DATA = '/home/douglas/corpora/kiwi/times.txt'

def main():
    gst_init()
    parser = argparse.ArgumentParser()
    add_common_args(parser, WINDOW_SIZE=WINDOW_SIZE,
                    BASENAME=BASENAME)
    parser.add_argument('-C', '--first-n', type=int, default=0,
                        help="classify this many files")
    parser.add_argument('--ground-truth-file',
                        help="write ground truth to this file (CSV)")
    parser.add_argument('--classification-file',
                        help="write classifications to this file")
    parser.add_argument('--roc', action='store_true',
                        help="show ROC curves")

    args = parser.parse_args()

    c = Classifier(channels=1)
    c.quiet = not args.verbose
    c.setp('force-load', args.force_load)

    if args.net_filename:
        c.setup_from_file(args.net_filename)
    else:
        c.setup(MFCCS,
                args.hidden_size,
                args.classes,
                window_size=args.window_size,
                bottom_layer=args.bottom_layer,
                basename=args.basename,
                min_freq=MIN_FREQUENCY,
                max_freq=MAX_FREQUENCY,
                knee_freq=KNEE_FREQUENCY,
                focus_freq=args.focus_frequency,
                lag=args.lag,
                delta_features=args.delta_features,
                intensity_feature=args.intensity_feature)

    timed_files, full_timings = load_timings(c.classes,
                                             args.timings,
                                             args.audio_directory)

    if args.first_n:
        timed_files = timed_files[:args.first_n]
    test_files = [(ffn, full_timings[ffn]) for fn, ffn in timed_files]

    c.classify(test_files, ground_truth_file=args.ground_truth_file,
               classification_file=args.classification_file, show_roc=args.roc)

main()
