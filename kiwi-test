#!/usr/bin/python
import os, sys
import random
import itertools
import time
import argparse

from classify import gst_init, TRAINING, TESTING, Gst
from classify_kiwi import MFCCS, CLASSES, WINDOW_SIZE, BASENAME

from classify import COLOURS, recursive_wav_finder, load_all_timings_binary
from classify import Classifier, load_timings

TEST_AUDIO_DIR = "/home/douglas/corpora/kiwi/test/"
KIWI_TIMING_DATA = '/home/douglas/corpora/kiwi/times.txt'

QUIET = False

def load_files_and_timings(d, classes):
    all_timings = load_timings(KIWI_TIMING_DATA, classes, classes[-1], QUIET)
    #print all_timings
    basefiles = [x for x in os.listdir(d)
                 if x.endswith('.wav') and x[0] in classes]
    files = [os.path.join(d, x) for x in basefiles]
    timings = [all_timings[x] for x in files]
    return files, timings

def main():
    global QUIET, NO_ROC
    gst_init()
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='lots of rubbish output')
    parser.add_argument('-x', '--no-roc', action='store_true',
                        help='no ROC curves')
    parser.add_argument('-t', '--timings',
                        help='read timings from here')
    parser.add_argument('-k', '--dir-with-timings', action='append',
                        help='use this directory with timings')
    parser.add_argument('-n', '--dir-without-timings', action='append',
                        help="use this directory without timings")
    parser.add_argument('-i', '--iterations', type=int, default=10000,
                        help="how many file cycles to run for")
    parser.add_argument('-H', '--hidden-size', type=int,
                        help="number of hidden neurons")
    parser.add_argument('-B', '--bottom-layer', type=int,
                        help="number of bottom layer output nodes")

    args = parser.parse_args()

    QUIET = not args.verbose
    NO_ROC = args.no_roc
    c = Classifier(mfccs=MFCCS,
                   hsize=args.hidden_size,
                   channels=1,
                   classes=CLASSES,
                   window_size=WINDOW_SIZE,
                   basename=BASENAME)
    c.quiet = QUIET
    if args.bottom_layer:
        c.classifier.set_property('bottom-layer', args.bottom_layer)

    timed_files = []
    for d in args.dir_with_timings:
        timed_files.extend(recursive_wav_finder(d))

    untimed_files = []
    for d in args.dir_without_timings:
        untimed_files.extend(recursive_wav_finder(d))

    timings = load_all_timings_binary(args.timings)
    t = [timings[x] for x in timed_files]

    #XXX we have no test stream
    #files = timed_files[:36] + untimed_files[:36]
    c.classify_files_with_timings(timed_files[:36], t)

main()
