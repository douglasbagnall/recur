#!/usr/bin/python
# Copyright 2014 Douglas Bagnall <douglas@halo.gen.nz> LGPL
import os, sys
import argparse

from classify import gst_init
from classify import Classifier, add_common_args, process_common_args

def main():
    gst_init()
    parser = argparse.ArgumentParser()
    add_common_args(parser)
    group = parser.add_argument_group('classify-test specific arguments')
    group.add_argument('-C', '--first-n', type=int, default=0,
                       help="classify this many files")
    group.add_argument('--ground-truth-file',
                       help="write ground truth to this file (CSV)")
    group.add_argument('--classification-file',
                       help="write classifications to this file")
    group.add_argument('--call-json-file',
                       help="write call locations to this file")
    group.add_argument('--score-file',
                       help="write best scores to this file")
    group.add_argument('--score-file-period', type=int, default=0,
                       help="if non-zero, write scores every this many seconds")
    group.add_argument('--score-file-n', type=int, default=0,
                       help="offset/number of samples in score files")
    group.add_argument('--call-edge-threshold', default=0.5, type=float,
                       help="use this edge threshold for call-json-file")
    group.add_argument('--call-peak-threshold', default=0.9, type=float,
                       help="peak threshold for call-json-file")
    group.add_argument('--call-duration-threshold', default=0, type=float,
                       help="min call length for call-json-file")
    group.add_argument('--roc', action='store_true',
                       help="show ROC curves")
    group.add_argument('--roc-arrows', type=int, default=1,
                       help="degree of arrow infestation on ROC curves")
    group.add_argument('--target-class',
                       help="use this class in reports and ROC")
    group.add_argument('--min-changes', type=int, default=0,
                       help="only test files with at least this many class switches")
    group.add_argument('--no-timings', action='store_true',
                       help="Don't compare with canonical timings")
    group.add_argument('--presence-roc', action='store_true',
                       help="plot a ROC curve of presence (implies --roc)")
    group.add_argument('--summary', action='store_true',
                       help="print short message indicating goodness")
    group.add_argument('--presence-index', type=int, default=None,
                       help="index for presence stats (Nth best over whole file)")
    group.add_argument('--smooth-presence', type=int, default=None,
                       help="Smooth presence results with a window of this size")
    group.add_argument('--presence-subsample', type=float, default=None,
                       help="resample to this Hz for presence calculations")
    group.add_argument('--presence-run-length', type=float, default=None,
                       help="mean of this many seconds for presence score")
    group.add_argument('--presence-ignore-start', type=float, default=None,
                       help="ignore this many initial scores for presence calculations")
    group.add_argument('--presence-csv', default=None,
                       help="write presence data here is CSV form")
    group.add_argument('--presence-file',
                       help="write presence data here")
    group.add_argument('--sort-files', action='store_true',
                       help="process files in alphabetical order")

    args = parser.parse_args()
    timed = not args.no_timings
    if any((args.call_json_file,
            args.classification_file,
            args.ground_truth_file)) and not args.target_class:
        print >> sys.stderr, "writing classification/calls requires --target-class"
        sys.exit(1)

    c = Classifier(channels=1)
    timed_files = process_common_args(c, args, timed=timed)
    if args.sort_files:
        timed_files.sort(key=lambda x: x.fullname)

    if args.min_changes:
        timed_files = [x for x in timed_files
                       if len(x.timings) >= args.min_changes]

    if args.first_n:
        timed_files = timed_files[:args.first_n]

    show_roc = args.roc or args.presence_roc

    c.classify(timed_files, ground_truth_file=args.ground_truth_file,
               classification_file=args.classification_file, show_roc=show_roc,
               call_json_file=args.call_json_file,
               call_edge_threshold=args.call_edge_threshold,
               call_peak_threshold=args.call_peak_threshold,
               call_duration_threshold=args.call_duration_threshold,
               show_presence_roc=args.presence_roc, target_index=args.target_class,
               summarise=args.summary, presence_index=args.presence_index,
               score_file=args.score_file, score_file_period=args.score_file_period,
               score_file_n=args.score_file_n,
               smooth_presence=args.smooth_presence,
               roc_arrows=args.roc_arrows,
               presence_subsample=args.presence_subsample,
               presence_run_length=args.presence_run_length,
               presence_ignore_start=args.presence_ignore_start,
               presence_file=args.presence_file,
               presence_csv=args.presence_csv
           )

main()
