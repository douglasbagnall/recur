#!/usr/bin/python
import sys
import argparse

def get_spectrum_24():
    reds = sum(
        [
            [0],
            range(0, 100, 14),
            range(90, 80, -14),
            range(75, 0, -35),
            [0] * 10,
            range(12, 145, 42),
            range(145, 205, 15),
            range(205, 255, 5),
            [255] * 12,
        ], [])
    greens = sum(
        [
            [0] * 12,
            range(0, 255, 23),
            [255] * 1,
            range(255, 0, -15),
            [0] * 5,
            range(0, 255, 31),
        ], [])
    blues = sum(
        [
            [0],
            range(0, 80, 10),
            range(80, 160, 25),
            range(150, 0, -15),
            [0] * 17,
            range(0, 150, 15),
            range(150, 250, 43),
        ], [])

    rgb = zip(reds, greens, blues)
    print >> sys.stderr, "reds %d greens %d blues %d" % (len(reds),
                                                         len(greens),
                                                         len(blues))
    comp = [(16 if (r * .3 + g * .6 + b * .1) > 128 else 15)
            for r, g, b in rgb]

    return rgb, comp

def print_spectrum_24():
    spectrum, comp = get_spectrum_24()
    for rgb, c in zip(spectrum, comp):
        r, g, b = rgb
        print "[48;2;%s;%s;%sm[38;5;%sm #%02x%02x%02x:%s%s" % (r, g, b, c,
                                                                   r, g, b, c, " " * 72)

    print "[49m"

def write_spectrum_24():
    spectrum, comp = get_spectrum_24()
    n = len(spectrum)
    print '#define N_COLOURS_24 %s' % n
    print
    print "static const char *COLOURS_24[%s] = {" % (n + 1)
    for bg, c in zip(spectrum, comp):
        r, g, b = bg
        print '  "\\x1B[48;2;%s;%s;%sm\\x1B[38;5;%sm",' % (r, g, b, c)
    print '  NULL'
    print '};'

def get_spectrum():
    spectrum = [x for sublist in
                [
                    [0] * 5,
                    [232, 232, 233, 233],
                    range(17, 20),
                    [24, 29],
                    range(28, 46, 6),
                    [76, 112, 118, 190],
                    range(226, 190, -6),
                    range(197, 202),
                    range(207, 228, 5),
                    range(155, 136, -5),
                ]
                for x in sublist]

    comp = [(15 if i > 15 else 253) for i, x in enumerate(spectrum)]
    return spectrum, comp
#\x1B)

def print_spectrum():
    spectrum, comp = get_spectrum()
    for bg, c in zip(spectrum, comp):
        print "[48;5;%sm[38;5;%sm %s:[3m%s[23m.%s" % (bg, c, bg, c, " " * 72)

    print "[49m"

def write_spectrum():
    spectrum, comp = get_spectrum()
    n = len(spectrum)
    print '#define N_COLOURS_256 %s' % n
    print
    print "static const char *COLOURS_256[%s] = {" % (n + 1)
    for bg, c in zip(spectrum, comp):
        print '  "\\x1B[48;5;%sm\\x1B[38;5;%sm",' % (bg, c)
    print '  NULL'
    print '};'


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--print-spectrum', action='store_true',
                        help="print colours rather than code")

    args = parser.parse_args()

    if args.print_spectrum:
        print_spectrum()
        print
        print_spectrum_24()
    else:
        print "#ifndef __GENERATED_COLOUR_SPECTRUM__"
        print "#define __GENERATED_COLOUR_SPECTRUM__"
        print "/* Generated by scripts/colour-gen, for ./text-cross-entropy.c */"
        print
        write_spectrum()
        print
        write_spectrum_24()
        print
        print "#endif"
main()
