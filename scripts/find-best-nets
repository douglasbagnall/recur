#!/usr/bin/python

import json
import sys
from collections import defaultdict
import argparse


SMALLER_IS_BETTER = ['mean_dfb', 'min_dfb', 'cross_entropy', 'briar']
SMALLER_IS_BETTER += ['p.' + x for x in SMALLER_IS_BETTER]

SCORE_ADJUST = {
    'auc': 2.0,
    'p.auc': 2.0,
    'f1': 0.5,
    'p.f1': 0.5,
    'mcc': 0.5,
    'p.mcc': 0.5,
}

PRESENCE_WEIGHT = 1.0

def calc_score(k, v, best):
    v = v or 1e-10
    best = best or 1e-10
    score = best / v if k in SMALLER_IS_BETTER else v / best
    score *= SCORE_ADJUST.get(k, 1.0)
    if k.startswith('p.'):
        score *= PRESENCE_WEIGHT
    return score

def print_summary(nets, n, cutoff):
    """print a semi-human-readable summary of the indicator metrics."""
    n = min(n, len(nets))
    summary = defaultdict(int)
    for k in sorted(nets[0].keys()):
        if k == 'filename':
            continue
        data = [(x[k], x['filename']) for x in nets]
        data.sort(reverse=(k not in SMALLER_IS_BETTER))
        print
        print k
        print "=" * len(k)
        best = data[0][0]
        for i in range(n):
            v, fn = data[i]
            summary[fn] += calc_score(k, v, best)
            print "%2d: %.4g %s" % (i + 1, v, fn)

    best = [(v, k) for k, v in summary.iteritems()]
    best.sort(reverse=True)
    print "\nsummary\n========"
    oldv = None
    for i, x in enumerate(best):
        v, fn = x
        if v < cutoff:
            break
        if v != oldv:
            rank = "%3d:" % (i + 1)
        else:
            rank = "    "
        oldv = v
        print "%s %.4g %s" % (rank, v, fn)


def print_list(nets, n, cutoff):
    """print only filenames of nets that appear in the top n of at least
    cutoff indicators."""
    n = min(n, len(nets))
    summary = defaultdict(int)
    for k in nets[0].keys():
        if k == 'filename':
            continue
        data = [(x[k], x['filename']) for x in nets]
        data.sort(reverse=(k not in SMALLER_IS_BETTER))
        best = data[0][0]
        for v, fn in data[:n]:
            summary[fn] += calc_score(k, v, best)

    best = [(v, k) for k, v in summary.iteritems()]
    best.sort(reverse=True)
    for i, x in enumerate(best):
        v, fn = x
        if v < cutoff:
            break
        print fn


def summarise_nets(fn, n=10, list_only=False, cutoff=2):
    nets = []
    f = open(fn)
    for line in f:
        stats = json.loads(line)
        nets.append(stats)
    f.close()
    try:
        if list_only:
            print_list(nets, n, cutoff)
        else:
            print_summary(nets, n, cutoff)
    except IOError, e:
        #don't print traceback when piping to e.g. head
        if 'Broken pipe' not in str(e):
            raise



def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-n', '--top-n', type=int, default=10,
                        help="list this many top nets per category")
    parser.add_argument('-l', '--list-only', action="store_true",
                        help="only list the top filenames")
    parser.add_argument('-c', '--cutoff', type=float, default=1e-20,
                        help='how many top-n listings a net needs'
                        ' to be in summary')
    parser.add_argument('-p', '--presence-adjust', type=float, default=1.0,
                        help="the relative importance of presence parameters")

    parser.add_argument('file', help='JSON file to use')
    args = parser.parse_args()

    global PRESENCE_WEIGHT
    PRESENCE_WEIGHT = args.presence_adjust

    summarise_nets(args.file, n=args.top_n, list_only=args.list_only,
                             cutoff=args.cutoff)

main()
