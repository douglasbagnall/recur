#!/usr/bin/python
import os, sys
import random
import itertools
import time
import argparse

from classify import gst_init
from classify_kiwi import MFCCS, WINDOW_SIZE, BASENAME
from classify import COLOURS, targeted_wav_finder
from classify import Trainer, lr_steps, load_timings

NET_LOG_FILE = "kiwi.log"


def main():
    gst_init()
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='lots of rubbish output')
    parser.add_argument('-t', '--timings', action='append',
                        help='read timings from here')
    parser.add_argument('-f', '--net-filename',
                        help='load RNN from here')
    parser.add_argument('-d', '--audio-directory', action='append',
                        help='find audio in this directory')
    parser.add_argument('-l', '--learn-rate', type=float,
                        help="learning rate")
    parser.add_argument('-i', '--iterations', type=int, default=10000,
                        help="how many file cycles to run for")
    parser.add_argument('-H', '--hidden-size', type=int,
                        help="number of hidden neurons")
    parser.add_argument('-B', '--bottom-layer', type=int,
                        help="number of bottom layer output nodes")
    parser.add_argument('-N', '--no-save-net', action='store_true',
                        help="don't save the net, periodically or otherwise")
    parser.add_argument('-c', '--classes', default='tf',
                        help="classes (letter per class, groups separated by commas)")
    parser.add_argument('-C', '--channels', default=12, type=int,
                        help="how many channels to use")
    parser.add_argument('-w', '--window-size', default=WINDOW_SIZE, type=int,
                        help="size of the FFT window")
    parser.add_argument('-n', '--basename', default=BASENAME,
                        help="save nets etc using this basename")
    parser.add_argument('-r', '--random-alignment', action='store_true',
                        help="slightly randomise alignment of fft windows")

    args = parser.parse_args()
    if args.learn_rate:
        lr = lr_steps(args.learn_rate)
    else:
        lr = lr_steps(
            3e-5, 20,
            1e-5, 80,
            3e-6, 100,
            1e-6, 200,
            3e-7, 400,
            1e-7, 2000,
            3e-8)
    if 0:
        dropout = lr_steps(0.5, 100,
                           0.4, 100,
                           0.3, 100,
                           0.2, 100,
                           0.1, 100,
                           0
                       )
    else:
        dropout = 0


    random.seed(1)

    n_channels = args.channels

    c = Trainer(channels=n_channels)

    c.no_save_net = args.no_save_net
    c.quiet = not args.verbose

    c.setp('random-alignment', args.random_alignment)

    if args.net_filename:
        c.setup_from_file(args.net_filename)
    else:
        c.setup(MFCCS,
                args.hidden_size,
                args.classes,
                window_size=args.window_size,
                basename=args.basename)

    if args.bottom_layer:
        c.setp('bottom-layer', args.bottom_layer)


    timed_files, full_timings = load_timings(c.classes,
                                             args.timings,
                                             args.audio_directory)

    validate_streams = [[ffn for fn, ffn in timed_files[:n_channels]]]
    training_streams = [[ffn for fn, ffn in timed_files[n_channels:]]]

    for x in training_streams:
        random.shuffle(x)

    c.timings = full_timings

    c.train(training_streams, validate_streams, iterations=args.iterations,
            learn_rate=lr, dropout=dropout, log_file=NET_LOG_FILE,
            properties=(('momentum-soft-start', 10000),
                        ('momentum', 0.95),
                        ('momentum-style', 1),
                        ('weight-fan-in-sum', 3),
                        ('weight-fan-in-kurtosis', 0.15),
                        ('min-frequency', 300),
                        ('knee-frequency', 1100),
                        ('max-frequency', 3800),
                        ('weight-diagonal', 0.5),
                        #('error-weight', '3:2'),
                    ))

main()
